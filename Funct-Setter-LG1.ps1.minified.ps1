${Funct-Setter-LG1.ps1} = {function Funct-Setter{[Cmdletbinding()]param([Parameter(Mandatory,Position=0)]$window,[Parameter(Mandatory,Position=1)][xml]$xmltext,[Parameter(Mandatory=$false)][string]$xpathtext,[Parameter(Mandatory=$false)][PSCustomObject[]]$fns,[Parameter(Mandatory=$false)][AllowEmptyString()][string]$module)begin{$i=0;$modulefns=((Get-Module $module -ErrorAction SilentlyContinue).ExportedFunctions.Values|% {$_.Name});foreach($f in $fns){$modulefnna=($modulefns | ?{$_-ilike "$f*"}).Length-ge1;$fnempty=(Get-Command $f -CommandType Function -ErrorAction SilentlyContinue).Definition-eq$null;if($fnempty){Write-Host -BackgroundColor Black -ForegroundColor Yellow "[FN:] - $($f) Function Definition Unavailable..";Write-Error -Message "$($f) Function Definition Unavailable.." -Category InvalidData -ErrorVariable 'invalidata';$invalidata|Out-File -FilePath ".\application.log" -Append};if(-not$modulefnna){Write-Host -BackgroundColor Black -ForegroundColor Yellow "[MODULE FN:] - $($f) Function Unavailable, module $($module)";Write-Error -Message "$($f) Function unavailable, module $($module)" -Category InvalidData -ErrorVariable 'invalidata';$invalidata|Out-File -FilePath ".\application.log" -Append}}}process{try{$xmltext.SelectNodes("//*[@Name]")|? {$_.Name-like"*$($xpathtext)*"}|% {$window.FindName($_.Name).add_Click([Windows.RoutedEventHandler]$fns[$i]);$i++} -ErrorAction Stop -ErrorVariable 'exception'}catch{Write-Error -Message "Error during event setup.. $($exception.Message)" -Category InvalidOperation -ErrorVariable 'invalidop';$invalidop|Out-File -FilePath ".\application.log" -Append}}end{Write-Host "$($error.Count) out of $($error.Capacity) errors purged..";$error.Clear()}}}
